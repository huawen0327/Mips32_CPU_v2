// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2020 18:02:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPUv2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPUv2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:0] clk;
reg [31:0] if_pc_test;
reg [0:0] rst;
// wires                                               
wire [31:0] id_inst_test;
wire [31:0] id_pc_test;

// assign statements (if any)                          
CPUv2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.id_inst_test(id_inst_test),
	.id_pc_test(id_pc_test),
	.if_pc_test(if_pc_test),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #50000 1'b1;
	rst = #320000 1'b0;
	rst = #100000 1'b1;
	rst = #350000 1'b0;
end 
// if_pc_test[ 31 ]
initial
begin
	if_pc_test[31] = 1'b0;
end 
// if_pc_test[ 30 ]
initial
begin
	if_pc_test[30] = 1'b0;
end 
// if_pc_test[ 29 ]
initial
begin
	if_pc_test[29] = 1'b0;
end 
// if_pc_test[ 28 ]
initial
begin
	if_pc_test[28] = 1'b0;
end 
// if_pc_test[ 27 ]
initial
begin
	if_pc_test[27] = 1'b0;
end 
// if_pc_test[ 26 ]
initial
begin
	if_pc_test[26] = 1'b0;
end 
// if_pc_test[ 25 ]
initial
begin
	if_pc_test[25] = 1'b0;
end 
// if_pc_test[ 24 ]
initial
begin
	if_pc_test[24] = 1'b0;
end 
// if_pc_test[ 23 ]
initial
begin
	if_pc_test[23] = 1'b0;
end 
// if_pc_test[ 22 ]
initial
begin
	if_pc_test[22] = 1'b0;
end 
// if_pc_test[ 21 ]
initial
begin
	if_pc_test[21] = 1'b0;
end 
// if_pc_test[ 20 ]
initial
begin
	if_pc_test[20] = 1'b0;
end 
// if_pc_test[ 19 ]
initial
begin
	if_pc_test[19] = 1'b0;
end 
// if_pc_test[ 18 ]
initial
begin
	if_pc_test[18] = 1'b0;
end 
// if_pc_test[ 17 ]
initial
begin
	if_pc_test[17] = 1'b0;
end 
// if_pc_test[ 16 ]
initial
begin
	if_pc_test[16] = 1'b0;
end 
// if_pc_test[ 15 ]
initial
begin
	if_pc_test[15] = 1'b0;
end 
// if_pc_test[ 14 ]
initial
begin
	if_pc_test[14] = 1'b0;
end 
// if_pc_test[ 13 ]
initial
begin
	if_pc_test[13] = 1'b0;
end 
// if_pc_test[ 12 ]
initial
begin
	if_pc_test[12] = 1'b0;
end 
// if_pc_test[ 11 ]
initial
begin
	if_pc_test[11] = 1'b0;
end 
// if_pc_test[ 10 ]
initial
begin
	if_pc_test[10] = 1'b0;
end 
// if_pc_test[ 9 ]
initial
begin
	if_pc_test[9] = 1'b0;
end 
// if_pc_test[ 8 ]
initial
begin
	if_pc_test[8] = 1'b0;
end 
// if_pc_test[ 7 ]
initial
begin
	if_pc_test[7] = 1'b0;
end 
// if_pc_test[ 6 ]
initial
begin
	if_pc_test[6] = 1'b0;
end 
// if_pc_test[ 5 ]
initial
begin
	if_pc_test[5] = 1'b0;
end 
// if_pc_test[ 4 ]
initial
begin
	if_pc_test[4] = 1'b0;
	if_pc_test[4] = #270000 1'b1;
	if_pc_test[4] = #150000 1'b0;
end 
// if_pc_test[ 3 ]
initial
begin
	if_pc_test[3] = 1'b0;
	if_pc_test[3] = #130000 1'b1;
	if_pc_test[3] = #140000 1'b0;
	if_pc_test[3] = #300000 1'b1;
end 
// if_pc_test[ 2 ]
initial
begin
	if_pc_test[2] = 1'b0;
	if_pc_test[2] = #70000 1'b1;
	if_pc_test[2] = #60000 1'b0;
	if_pc_test[2] = #60000 1'b1;
	if_pc_test[2] = #80000 1'b0;
	if_pc_test[2] = #80000 1'b1;
	if_pc_test[2] = #70000 1'b0;
	if_pc_test[2] = #70000 1'b1;
	if_pc_test[2] = #80000 1'b0;
end 
// if_pc_test[ 1 ]
initial
begin
	if_pc_test[1] = 1'b0;
end 
// if_pc_test[ 0 ]
initial
begin
	if_pc_test[0] = 1'b0;
end 
endmodule

